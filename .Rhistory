) |>
dplyr::left_join(
med_benef |>
dplyr::filter(base == "med", beneficiarios != 0, ano > 2015) |>
dplyr::rename(modalidade = categoria) |>
dplyr::select(-base) |>
dplyr::mutate(modalidade = dplyr::case_when(
modalidade == "seguradora_especializada_em_saude" ~ "seguradora",
TRUE ~ modalidade
)),
by = c("ano", "modalidade")
) |>
tidyr::drop_na() |>
dplyr::group_by(ano, modalidade) |>
dplyr::summarise(
ticket_medio_deducoes = (receita_de_contraprestacoes_deducoes / beneficiarios) / 9,
ticket_medio = (receita_de_contraprestacoes / beneficiarios) / 9
)
# |- margem operacional ---------------------------------------------------
margem_operacional <- tabela_financeira_med |>
dplyr::group_by(ano, class_conta) |>
dplyr::summarise(saldo_final = sum(saldo_final, na.rm = TRUE)) |>
dplyr::filter(ano > 2018) |>
tidyr::pivot_wider(
names_from = class_conta,
values_from = saldo_final
) |>
dplyr::mutate(
resultado_operacional = receita_de_contraprestacoes_medica + outras_receitas_operacionais - despesa_assistencial_medica - despesa_administrativa - despesa_de_comercializacao - outras_despesas_operacionais + contraprestacoes_de_corresponsabilidade_transferida_medica + outras_deducoes_medica + tributos_diretos_operacao_planos_medica + tributos_diretos_outras_ativ_medica + variacao_das_provisoes_tecnicas_medica
) |>
dplyr::select(
resultado_operacional,
despesa_assistencial = despesa_assistencial_medica,
receita_de_contraprestacoes = receita_de_contraprestacoes_medica
) |>
dplyr::mutate(
margem_operacional = resultado_operacional / receita_de_contraprestacoes
) |>
tidyr::pivot_longer(
cols = -ano,
names_to = "class_conta",
values_to = "saldo_final"
)
# |- sinistralidade -------------------------------------------------------
sinistralidade_med <- tab_fin_med |>
dplyr::group_by(ano, class_conta) |>
dplyr::summarise(saldo_final = sum(saldo_final, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::group_by(ano) |>
dplyr::summarise(
sinistralidade = saldo_final[class_conta == "despesa_assistencial"] / saldo_final[class_conta == "receita_de_contraprestacoes"],
sinistralidade_deducoes = saldo_final[class_conta == "despesa_assistencial"] / saldo_final[class_conta == "receita_de_contraprestacoes_deducoes"]
) |>
dplyr::mutate(
sinistralidade_media = mean(sinistralidade),
sinistralidade_media_deducoes = mean(sinistralidade_deducoes)
)
# |- desempenho financeiro - medicina de grupo ----------------------------
selecao_contas <- c("3111", "33", "3117", "3119", "312", "32", "34", "41111", "41121", "41131", "41141", "41151", "41171", "41181", "41191", "4311", "4313", "43", "44", "46", "35", "36", "45", "47", "611", "612")
anos <- tabela_financeira_final |>
dplyr::distinct(ano) |>
dplyr::slice_tail(n = 2) |>
purrr::flatten_dbl()
desp_fin_mg <- tabela_financeira[
,
ano_tri := zoo::as.yearqtr(ano_tri)
][
lubridate::year(ano_tri) %in% anos & modalidade == "Medicina de Grupo" & cd_cc %in% selecao_contas
][
,
":="(
class_cc = tidyfast::dt_case_when(
cd_cc %in% c("3111", "33") ~ "Faturamento",
cd_cc %in% c("3117", "3119", "312", "32", "34") ~ "Deduções e impostos",
cd_cc %in% c("41111", "41121", "41131", "41141", "41151", "41171", "41181", "41191") ~ "Custos dos produtos vendidos",
cd_cc %in% c("43", "44", "46") ~ "Despesas operacionais líquidas",
cd_cc %in% c("35", "36") ~ "Receita patrimonial e financeira",
cd_cc %in% c("45", "47") ~ "Despesa patrimonial e financeira",
cd_cc == "611" ~ "IRPJ e CSLL",
cd_cc == "612" ~ "Participações sobre lucro"
),
ano = lubridate::year(ano_tri)
)
][
,
.(vl_saldo = collapse::fsum(vl_saldo_final, na.rm = TRUE)),
keyby = .(ano, class_cc, modalidade)
]
# dados financeiros odonto ------------------------------------------------
cat("\n=== DADOS FINANCEIROS ODONTO ===\n")
# |- receita de contraprestações, receita deduzida e despesa assist -------
tab_fin_od <- tabela_financeira_final |>
dplyr::filter(class_conta %in% c("despesa_assistencial_odonto", "receita_de_contraprestacoes_odonto")) |>
dplyr::group_by(ano, class_conta, modalidade) |>
dplyr::summarise(saldo_final = sum(saldo_final, na.rm = TRUE)) |>
dplyr::filter(saldo_final != 0) |>
tidyr::pivot_wider(
names_from = modalidade,
values_from = saldo_final
) |>
dplyr::ungroup() |>
dplyr::mutate(
total = autogestao + cooperativa_medica + cooperativa_odontologica + filantropia + medicina_de_grupo + odontologia_de_grupo + seguradora,
total_sem_autogestao = total - autogestao,
total_sem_autogestao_coop_medica = total_sem_autogestao - cooperativa_medica
) |>
tidyr::pivot_longer(
cols = -c(ano, class_conta),
names_to = "modalidade",
values_to = "saldo_final"
)
# |- ticket médio ---------------------------------------------------------
ticket_medio_odonto <- tab_fin_od |>
dplyr::filter(class_conta == "receita_de_contraprestacoes_odonto") |>
tidyr::pivot_wider(
names_from = class_conta,
values_from = saldo_final
) |>
dplyr::left_join(
med_benef |>
dplyr::filter(base == "odonto", beneficiarios != 0, ano > 2015) |>
dplyr::rename(modalidade = categoria) |>
dplyr::select(-base) |>
dplyr::mutate(modalidade = dplyr::case_when(
modalidade == "seguradora_especializada_em_saude" ~ "seguradora",
TRUE ~ modalidade
)),
by = c("ano", "modalidade")
) |>
dplyr::group_by(ano) |>
dplyr::mutate(
beneficiarios = dplyr::case_when(
modalidade == "total_sem_autogestao" ~ beneficiarios[modalidade == "total"] - beneficiarios[modalidade == "autogestao"],
modalidade == "total_sem_autogestao_coop_medica" ~ beneficiarios[modalidade == "total"] - beneficiarios[modalidade == "autogestao"] - beneficiarios[modalidade == "cooperativa_medica"],
TRUE ~ beneficiarios
)
) |>
dplyr::filter(modalidade != "autogestao") |>
dplyr::group_by(ano, modalidade) |>
dplyr::summarise(ticket_medio = (receita_de_contraprestacoes_odonto / beneficiarios) / par$meses_ticket) |>
tidyr::drop_na()
# |- sinistralidade -------------------------------------------------------
sinistralidade_odonto <- tab_fin_od |>
dplyr::group_by(ano, class_conta) |>
dplyr::summarise(saldo_final = sum(saldo_final, na.rm = TRUE)) |>
dplyr::ungroup() |>
dplyr::group_by(ano) |>
dplyr::summarise(sinistralidade = saldo_final[class_conta == "despesa_assistencial_odonto"] / saldo_final[class_conta == "receita_de_contraprestacoes_odonto"]) |>
dplyr::mutate(sinistralidade_media = mean(sinistralidade))
# |- desempenho financeiro - odontologia de grupo -------------------------
selecao_contas <- c("31112", "313", "314", "33", "3117", "3119", "312", "32", "34", "41112", "41122", "41132", "41142", "41152", "41172", "41182", "41192", "4312", "4314", "414", "415", "43", "44", "46", "35", "36", "45", "47", "611", "612")
desp_fin_og <- tabela_financeira[
,
ano_tri := zoo::as.yearqtr(ano_tri)
][
lubridate::year(ano_tri) %in% anos & modalidade == "Odontologia de Grupo"
][
,
":="(
class_cc = tidyfast::dt_case_when(
cd_cc %in% c("31112", "313", "314", "33") ~ "Faturamento",
cd_cc %in% c("3117", "3119", "312", "32", "34") ~ "Deduções e impostos",
cd_cc %in% c("41112", "41122", "41132", "41142", "41152", "41172", "41182", "41192", "414", "415") ~ "Custos dos produtos vendidos",
cd_cc %in% c("43", "44", "46") ~ "Despesas operacionais líquidas",
cd_cc %in% c("35", "36") ~ "Receita patrimonial e financeira",
cd_cc %in% c("45", "47") ~ "Despesa patrimonial e financeira",
cd_cc == "611" ~ "IRPJ e CSLL",
cd_cc == "612" ~ "Participações sobre lucro"
),
ano = lubridate::year(ano_tri)
)
][
class_cc != "EXCLUIR"
][
,
.(vl_saldo = collapse::fsum(vl_saldo_final, na.rm = TRUE)),
keyby = .(ano, class_cc, modalidade)
]
# |- participação de mercado - receita de contraprestações ----------------
participacao_mercado_odonto <- tabela_financeira_final |>
dplyr::filter(
class_conta == "receita_de_contraprestacoes_odonto"
) |>
dplyr::group_by(ano, modalidade) |>
dplyr::summarise(receita_contraprestacoes = sum(saldo_final, na.rm = TRUE)) |>
dplyr::filter(receita_contraprestacoes > 0)
participacao_mercado_odonto <- participacao_mercado_odonto |>
dplyr::summarise(
receita_contraprestacoes = sum(receita_contraprestacoes, na.rm = TRUE)
) |>
dplyr::mutate(modalidade = "total") |>
dplyr::bind_rows(participacao_mercado_odonto)
# posição financeira ------------------------------------------------------
selecao_contas <- c("1211", "121", "1221", "1222", "123", "124", "125", "126", "127", "128", "129", "121", "13211", "13212", "13213", "13214", "13215", "1323", "1324", "1328", "13311", "13321", "13331", "13341", "13312", "13322", "13332", "13342", "1311", "1312", "1221", "1222", "211", "231", "215", "235")
posicao_fin <- tabela_financeira[
cd_cc %in% selecao_contas
][
,
":="(
class_cc = tidyfast::dt_case_when(
cd_cc %in% c("121", "1221", "1222", "123", "124", "125", "126", "127", "128", "129") ~ "Ativo circulante",
cd_cc == "1211" ~ "Caixa",
cd_cc %in% c("13211", "13212", "13213", "13214", "13215", "1323", "1324", "1328") ~ "Participações",
cd_cc %in% c("13311", "13321", "13331", "13341", "13312", "13322", "13332", "13342") ~ "Imóveis",
cd_cc %in% c("1311", "1312", "1221", "1222") ~ "Aplicações",
cd_cc %in% c("211", "231") ~ "Provisões técnicas",
cd_cc %in% c("215", "235") ~ "Provisões fiscais"
),
ano = lubridate::year(ano_tri)
)
][
,
.(vl_saldo = collapse::fsum(vl_saldo_final, na.rm = TRUE)),
keyby = .(ano, class_cc)
]
# export ------------------------------------------------------------------
cat("\n=== EXPORT ===\n")
desp_fin <- list(desp_fin_mg, desp_fin_og) |>
data.table::rbindlist() |>
tibble::as_tibble()
vars <- list(tab_resumo_medico, tab_fin_med, ticket_medio_med, margem_operacional, sinistralidade_med, tab_fin_od, ticket_medio_odonto, sinistralidade_odonto, desp_fin, posicao_fin, participacao_mercado_odonto)
names <- c("tab_resumo_medico", "tab_fin_med", "ticket_medio_med", "margem_operacional", "sinistralidade_med", "tab_fin_od", "ticket_medio_odonto", "sinistralidade_odonto", "desempenho_financeiro", "posicao_financeira", "participacao_mercado_odonto")
invisible(
pbapply::pblapply(
seq_len(length(vars)),
function(i) writexl::write_xlsx(vars[[i]], glue::glue("outputs/3_{names[i]}.xlsx"))
)
)
}
adesao_cancelamento <- function(par) {
cat("\n=+=+=+=+=+=+=+=+=+=+ 4_ADESAO_CANCELAMENTO =+=+=+=+=+=+=+=+=+=+\n")
# definindo os padrões da busca -------------------------------------------
cat("\n=== CRIAÇÃO DE URLS ===\n")
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "data/4_beneficiarios.duckdb.wal")
beneficiarios <- dplyr::tbl(con, "beneficiarios")
periodo_presente <- anos_presentes_db(beneficiarios)
urls <- urls_ad_can(
anos = par$anos,
meses = par$meses,
ufs = par$ufs,
periodo_presente
)
# download ----------------------------------------------------------------
cat("\n=== DOWNLOAD E APPEND DE DADOS ===\n")
if (sum(!is.na(urls)) > 0) {
posicao_mes_atual <- match(
glue::glue("{par$anos}{par$mes_atual}") |>
as.numeric(),
periodo_presente
)
if (!is.na(posicao_mes_atual)) {
janela <- periodo_presente[seq(posicao_mes_atual - 36, posicao_mes_atual)]
} else {
janela <- periodo_presente[
seq(
match(tail(periodo_presente, 1), periodo_presente) - 35,
match(tail(periodo_presente, 1), periodo_presente)
)
]
janela[length(janela) + 1] <- glue::glue("{par$ano}{par$mes_atual}") |>
as.numeric()
}
meses_urls <- urls |>
stringr::str_sub(start = -13, end = -8) |>
as.numeric() |>
collapse::funique()
url_in_janela <- meses_urls %in% janela |>
sum()
if (url_in_janela > 0) {
fs::dir_create("data/beneficiarios")
contagem_benef(urls)
beneficiarios_new <- fs::dir_ls("data/beneficiarios/") |>
arrow::open_dataset() |>
dplyr::collect()
DBI::dbWriteTable(
conn = con,
name = "beneficiarios",
value = beneficiarios_new,
append = TRUE
)
fs::dir_delete("data/beneficiarios/")
} else {
cat("\nDados disponíveis no FTP não estão na janela de seleção desse trimestre.\n")
}
} else {
cat("\nDados disponíveis no FTP não estão na janela de seleção desse trimestre.\n")
}
# contagem de adesões e cancelamentos -------------------------------------
cat("\n=== TRATAMENTO ===\n")
cancelamentos_adesoes <- beneficiarios |>
dplyr::group_by(
modalidade_operadora,
de_contratacao_plano,
cobertura_assist_plan,
dt_vigencia
) |>
dplyr::summarise(
ativos = sum(ativos, na.rm = TRUE),
aderidos = sum(aderidos, na.rm = TRUE),
cancelados = sum(cancelados, na.rm = TRUE)
) |>
dplyr::collect() |>
tidyr::pivot_longer(
cols = 5:7,
names_to = "tipo_beneficiario",
values_to = "qtd"
) |>
dplyr::ungroup() |>
dplyr::mutate(dt_vigencia = lubridate::ym(dt_vigencia)) |>
dplyr::filter(
de_contratacao_plano != "",
de_contratacao_plano != "Não Identificado",
cobertura_assist_plan != "Não identificado",
qtd > 0
) |>
dplyr::filter(tipo_beneficiario %in% c("cancelados", "aderidos")) |>
dplyr::mutate(
gr_contratacao = dplyr::case_when(
de_contratacao_plano %in% c(
"COLETIVO EMPRESARIAL",
"COLETIVO EMPRESARIAL COM PATROCÍNIO",
"COLETIVO EMPRESARIAL SEM PATROCÍNIO"
) ~ "coletivo_empresarial",
de_contratacao_plano %in% c(
"COLETIVO POR ADESÃO",
"COLETIVO POR ADESÃO COM PATROCÍNIO",
"COLETIVO EMPRESARIAL SEM PATROCÍNIO"
) ~ "coletivo_por_adesao",
de_contratacao_plano %in% c(
"INDIVIDUAL + COLETIVO EMPRESARIAL + COLETIVO POR ADESÃO",
"INDIVIDUAL OU FAMILIAR"
) ~ "individual_ou_familiar",
TRUE ~ "X"
)
) |>
dplyr::filter(gr_contratacao != "X") |>
dplyr::ungroup() |>
dplyr::select(-de_contratacao_plano) |>
dplyr::group_by(
cobertura_assist_plan,
gr_contratacao,
dt_vigencia,
tipo_beneficiario
) |>
dplyr::summarise(qtd = sum(qtd, na.rm = TRUE))
beneficiarios_anual <- readxl::read_xlsx("outputs/1_benef.xlsx") |>
dplyr::filter(id == "tipo_contratacao") |>
dplyr::mutate(
ano = tri |>
zoo::as.yearqtr() |>
lubridate::year(),
cobertura_assist_plan = dplyr::case_when(
base == "med" ~ "Médico-hospitalar",
TRUE ~ "Odontológico"
)
) |>
dplyr::rename(
gr_contratacao = categoria,
qtd_ano = beneficiarios
) |>
dplyr::select(ano, cobertura_assist_plan, gr_contratacao, qtd_ano)
churn_rate <- cancelamentos_adesoes |>
dplyr::filter(tipo_beneficiario == "cancelados") |>
dplyr::select(-tipo_beneficiario) |>
dplyr::group_by(cobertura_assist_plan, gr_contratacao) |>
dplyr::arrange(dt_vigencia) |>
dplyr::mutate(
cum_qtd = zoo::rollsum(qtd, k = 12, fill = NA, align = "right"),
ano = lubridate::year(dt_vigencia)
) |>
dplyr::ungroup() |>
tidyr::drop_na() |>
dplyr::inner_join(
beneficiarios_anual,
by = c("ano", "cobertura_assist_plan", "gr_contratacao")
) |>
dplyr::select(-ano) |>
dplyr::mutate(
churn_rate_anual = 1 + (cum_qtd / qtd_ano),
churn_rate_mensal = (churn_rate_anual^(1 / 12)) - 1
)
# exports -----------------------------------------------------------------
cat("\n=== EXPORT ===\n")
vars <- list(cancelamentos_adesoes, churn_rate)
names <- c("cancelamentos_adesoes", "churn_rate")
invisible(
pbapply::pblapply(
seq_len(length(vars)),
function(i) writexl::write_xlsx(vars[[i]], glue::glue("outputs/4_{names[i]}.xlsx"))
)
)
DBI::dbDisconnect(con, shutdown = TRUE)
}
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "data/4_beneficiarios.duckdb.wal")
dbDisconnect(con, shutdown = TRUE)
dbDisconnect(con, shutdown=TRUE)
source("R/0_bibliotecas.R")
source("R/0_funcoes.R")
fs::dir_ls("R/") |>
purrr::walk(source)
options(scipen = 999)
options(dplyr.summarise.inform = FALSE)
future::plan("multisession")
ggplot2::theme_set(theme_minimal())
tags_dir <- webscrapANS::create_sqlite_tags()
if (!fs::dir_exists("outputs/")) fs::dir_create("outputs/")
year <- 2022
edition <- glue::glue("3t_{year}")
range_months <- "Jan-Set"
tamanhos <- list(
numeros = 10 / ggplot2:::.pt,
legenda = 12,
eixos = 8 / ggplot2:::.pt
)
cores_cs <- c("#db7c70", "#5a90db", "#81868f")
cores <- list(
grafico_1 = cores_cs,
grafico_2 = cores_cs[1:2],
grafico_3_10 = "red",
grafico_4_11 = cores_cs,
grafico_5_12 = cores_cs,
grafico_6 = cores_cs,
grafico_7_13 = cores_cs[1],
grafico_8 = cores_cs[1:2],
grafico_9 = cores_cs,
grafico_14 = cores_cs[1:2]
)
functions_data <- tibble::tribble(
~f, ~params,
# 1_dados_tabnet ----
"dados_tabnet", list(
par = list(
anos = seq(15, year - 2000),
tri = c("03", "06", "09", "12"),
tri_atual = "09",
tags_dir = tags_dir
)
),
# 2_cadop ----
# 3_analise_financeira ----
"analise_financeira", list(
par = list(
anos = seq(2017, year),
tri = "3T",
meses_ticket = 9
)
),
# 4_adesao_cancelamento ----
"adesao_cancelamento", list(
par = list(
anos = year,
ufs = readr::read_rds("data/aux_files/ufs.rds"),
meses = c(paste0("0", 1:9), 10:12),
mes_atual = "09"
)
),
# 5_dados_var ----
"dados_var", list(
par = list(
ano = year,
mes_seg_desemp = "09",
tri_benef = c("03", "06", "09", "12"),
tags_dir = tags_dir
)
),
# 6_modelos_var ----
"modelos_var", NULL
)
invisible(
purrr::invoke_map(
functions_data$f,
functions_data$params
)
)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "data/4_beneficiarios.duckdb")
duckdb_shutdown()
source("R/0_bibliotecas.R")
source("R/0_funcoes.R")
fs::dir_ls("R/") |>
purrr::walk(source)
options(scipen = 999)
options(dplyr.summarise.inform = FALSE)
future::plan("multisession")
ggplot2::theme_set(theme_minimal())
tags_dir <- webscrapANS::create_sqlite_tags()
if (!fs::dir_exists("outputs/")) fs::dir_create("outputs/")
year <- 2022
edition <- glue::glue("3t_{year}")
range_months <- "Jan-Set"
tamanhos <- list(
numeros = 10 / ggplot2:::.pt,
legenda = 12,
eixos = 8 / ggplot2:::.pt
)
cores_cs <- c("#db7c70", "#5a90db", "#81868f")
cores <- list(
grafico_1 = cores_cs,
grafico_2 = cores_cs[1:2],
grafico_3_10 = "red",
grafico_4_11 = cores_cs,
grafico_5_12 = cores_cs,
grafico_6 = cores_cs,
grafico_7_13 = cores_cs[1],
grafico_8 = cores_cs[1:2],
grafico_9 = cores_cs,
grafico_14 = cores_cs[1:2]
)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "data/4_beneficiarios.duckdb")
View(con)
beneficiarios <- dplyr::tbl(con, "beneficiarios")
View(con)
beneficiarios <- dplyr::tbl(con, "beneficiarios")
